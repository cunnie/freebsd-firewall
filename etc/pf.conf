#	$FreeBSD: src/share/examples/pf/pf.conf,v 1.1.2.1.6.1 2009/04/15 03:14:26 kensmith Exp $
#	$OpenBSD: pf.conf,v 1.34 2007/02/24 19:30:59 millert Exp $
#
# See pf.conf(5) and /usr/share/examples/pf for syntax and examples.
# Remember to set net.inet.ip.forwarding=1 and/or net.inet6.ip6.forwarding=1
# in /etc/sysctl.conf if packets are to be forwarded between interfaces.
#
# to install:		sudo pfctl -f /etc/pf.conf
# install+flush:	sudo pfctl -F all -f /etc/pf.conf
# to check: 		sudo pfctl -vnf /etc/pf.conf
#
#
# to install w/out flushing:

if_comcast="ix0"
if_nono="ix1"
if_guest="ix1.2"
if_k8s="ix1.240"
if_cf="ix1.250"
if_tas="ix1.251"
if_wireguard="wg0"

net_ipv4="10.0.0.0/8"
net_ipv6="2601:646:100:69f0::/60"
net_ipv4_nono="10.0.9.0/24"
net_ipv6_nono="2601:646:100:69f0::/64"
net_ipv4_guest="10.2.0.0/24"
net_ipv6_guest="2601:646:100:69f3::/64"
net_ipv4_k8s="10.240.0.0/24"
net_ipv6_k8s="2601:646:100:69f2::/64"
net_ipv4_cf="10.0.250.0/24"
net_ipv6_cf="2601:646:100:69f5::/64"
net_ipv4_tas="10.0.251.0/24"
net_ipv6_tas="2601:646:100:69f6::/64"
ipv4_tara="10.0.9.30"
ipv4_diarizer="10.2.0.99"
ipv6_diarizer="2601:646:100:69f3::99"
ipv4_haproxy="10.0.250.10"
ipv6_s3="2601:646:100:69f0::80"
ipv4_s3="10.0.9.80"
ipv6_haproxy="2601:646:100:69f5::10"
ipv4_cf_tcp="10.0.250.14"
ipv4_bosh="10.2.0.250"
ipv4_vcenter_esxi="{ 10.0.9.40 10.0.9.41 10.0.9.42 10.0.9.67 10.0.9.70}"
ipv6_bosh="2601:646:100:69f0::106"
ipv4_unifi="10.0.9.6"
ipv4_fedora="10.0.9.106"

privileged_ipv4="{209.234.137.222, 204.15.0.254, 157.131.201.255, 76.218.97.10, 73.231.54.225, 73.109.109.214, 75.83.18.208, 76.93.152.77, 67.188.38.156, 24.5.94.201, 24.6.9.22, 190.25.76.195 70.16.39.176 99.46.182.133 181.63.106.170 67.170.72.112 190.63.127.97 199.241.202.65 }" # ?, Piv SF, Sarah, Weyman, Mona, Teal, Oleske, Palermo, Upton, Maria, Julian, Daniel, Long, Rajan, Camila, Chris, Maya, Aram
privileged_ipv6="{2001:4870:a2ce:1100::/56, 2600:1700:8d70:7390::/64 2601:645:8101:f9d6::/64 2600:1700:a060:9240::/64 2601:602:8700:c70::/64 2600:1700:f500:17b0::/64 2601:647:c800:d760::/64 2600:1700:9de0:acd0::/64 2605:e000:1313:46b7::/64 2a00:801:3c5:6b3:bd54:2ce5:7588:3e45/128 2601:646:200:d3f3::/64 2601:586:281:9fb0::/64 2603:7000:2703:b::/64 }" # Piv, Maureen?, Reid, Belinda, Teal, Weyman, James, Merric at parents, Christopher, Ruben, Lakin, Galen, Brendan

icmp4_types="{ echoreq }" # ping
icmp6_types="{ 2 128 }" # packet too big, echo request (ping6)
# Neighbor Discovery Protocol (NDP) (types 133-137):
#   Router Solicitation (RS), Router Advertisement (RA)
#   Neighbor Solicitation (NS), Neighbor Advertisement (NA)
#   Route Redirection
icmp6_types="{ 128 133 134 135 136 137 }"
svcs_tcp="{ 22 }" # we allow inbound ssh to our firewall
svcs_udp="{ 123 546 51820 }" # 546 == dhcpv6-client, IPv6-only, 51820 == wireguard
svcs_bosh="{ 4222 6868 8443 8844 25250 25555 25777 }" # NATS, Agent, UAA, CredHub, Blobstore, Director, Registry (Azure)
svcs_diarizer="{ 8080 9443 }"
svcs_cf="{ 80 443 2222 }"
svcs_cf_tcp="1024:1033"
svcs_privileged_ipv6="{22 80 443 5480 5900 8080 9443 25555}"
k8s_servers = "{ 10.240.0.10 10.240.0.11 10.240.0.12 }"

# options
set block-policy return
set loginterface $if_comcast
set skip on lo

# scrub
scrub in

# nat/rdr
nat on $if_comcast from $net_ipv4 -> ( $if_comcast ) static-port
nat-anchor "ftp-proxy/*"
rdr-anchor "ftp-proxy/*"
# UPnPd rdr anchor
rdr-anchor "miniupnpd"

# allow ssh, screensharing from privileged IP addresses (e.g. work)
rdr pass on $if_comcast proto tcp from $privileged_ipv4 to port  3222 -> $ipv4_tara	port 22
rdr pass on $if_comcast proto tcp from $privileged_ipv4 to port  5900 -> $ipv4_tara	port 5900

# Cloud Foundry: *.cf.nono.io
rdr pass on $if_comcast proto tcp to port    80 -> $ipv4_haproxy	port 80
rdr pass on $if_comcast proto tcp to port   443 -> $ipv4_haproxy	port 443
rdr pass on $if_comcast proto tcp to port  2222 -> $ipv4_haproxy	port 2222
rdr pass on $if_comcast proto tcp to port  $svcs_cf_tcp -> $ipv4_cf_tcp	port $svcs_cf_tcp
# Cloud Foundry should be reachable from my main subnet & from itself
rdr on $if_nono proto tcp from $net_ipv4_nono to $if_comcast    port $svcs_cf -> $ipv4_haproxy
rdr on $if_nono proto tcp from $net_ipv4_nono to $if_comcast    port $svcs_cf_tcp -> $ipv4_cf_tcp
# Hairpin web & ssh, but we're not bothering to hairpin the TCP ports 1024:1033
rdr on $if_cf  proto tcp from $net_ipv4_cf  to $if_comcast    port $svcs_cf -> $ipv4_haproxy
nat on $if_cf  proto tcp from $net_ipv4_cf  to $ipv4_haproxy  port $svcs_cf -> $if_cf

# s3 from nono, and from guest where the Concourse worker is
rdr pass on $if_comcast proto tcp to port  9000 -> $ipv4_s3      port 9000
rdr on $if_nono  proto tcp from $net_ipv4_nono  to $if_comcast   port 9000 -> $ipv4_s3
nat on $if_nono  proto tcp from $net_ipv4_nono  to $ipv4_s3      port 9000 -> $if_nono
rdr on $if_guest proto tcp from $net_ipv4_guest to $if_comcast   port 9000 -> $ipv4_s3

# diarizer.com ports, 8080 (clear) and 9443 (TLS), for uploading sound files
# ports 80 & 443 are proxied by Cloud Foundry
rdr pass on $if_comcast proto tcp to port  8080 -> $ipv4_diarizer	port 8080
rdr pass on $if_comcast proto tcp to port  9443 -> $ipv4_diarizer	port 9443
rdr on $if_nono proto tcp from $net_ipv4_nono to $if_comcast    port $svcs_diarizer -> $ipv4_diarizer
# Concourse worker (guest) needs to contact diarizer (guest), so hairpin:
rdr on $if_guest proto tcp from $net_ipv4_guest to $if_comcast    port $svcs_diarizer -> $ipv4_diarizer
nat on $if_guest  proto tcp from $net_ipv4_guest to $ipv4_diarizer  port $svcs_diarizer -> $if_guest
# Concourse worker (guest) needs to contact cf (cf)
rdr on $if_guest proto tcp from $net_ipv4_guest to $if_comcast    port $svcs_cf -> $ipv4_haproxy

# BOSH
rdr pass on $if_comcast proto tcp to port  4222 -> $ipv4_bosh port  4222
rdr pass on $if_comcast proto tcp to port  6868 -> $ipv4_bosh port  6868
rdr pass on $if_comcast proto tcp to port  8443 -> $ipv4_bosh port  8443
rdr pass on $if_comcast proto tcp to port  8844 -> $ipv4_bosh port  8844
rdr pass on $if_comcast proto tcp to port 25250 -> $ipv4_bosh port 25250
rdr pass on $if_comcast proto tcp to port 25555 -> $ipv4_bosh port 25555
rdr pass on $if_comcast proto tcp to port 25777 -> $ipv4_bosh port 25777
# BOSH reachable from nono and cf and k8s
rdr on $if_nono  proto tcp from $net_ipv4_nono  to $if_comcast port $svcs_bosh -> $ipv4_bosh
rdr on $if_cf    proto tcp from $net_ipv4_cf    to $if_comcast port $svcs_bosh -> $ipv4_bosh
rdr on $if_k8s   proto tcp from $net_ipv4_k8s   to $if_comcast port $svcs_bosh -> $ipv4_bosh
# Hairpin on guest
nat on $if_guest proto tcp from $net_ipv4_guest to $ipv4_bosh port $svcs_bosh  -> $if_guest
rdr on $if_guest proto tcp from $net_ipv4_guest to $if_comcast port $svcs_bosh -> $ipv4_bosh

# Kubernetes
rdr pass on $if_comcast proto tcp to port  6443 -> $k8s_servers port 6443 round-robin sticky-address
# reachable from main subnet
rdr on $if_nono proto tcp from $net_ipv4_nono to $if_comcast    port 6443           -> $k8s_servers round-robin sticky-address
# Hairpin on k8s subnet
nat on $if_k8s  proto tcp from $net_ipv4_k8s  to $k8s_servers   port 6443           -> $if_k8s
rdr on $if_k8s  proto tcp from $net_ipv4_k8s  to $if_comcast    port 6443           -> $k8s_servers round-robin sticky-address

# Fedora
rdr pass on $if_comcast proto tcp to port 5222 -> $ipv4_fedora port 22

# Anchors: ftp & miniupnp
anchor "ftp-proxy/*"
anchor "miniupnpd"

antispoof quick for { lo $if_nono $if_guest $if_k8s $if_cf $if_tas $if_comcast }

pass  in  quick on { $if_wireguard } to { $net_ipv4 } no state
pass  in  quick on { $if_nono }
pass  in  quick on { $if_cf $if_tas } to $ipv4_vcenter_esxi # BOSH must reach vCenter, ESXi
pass  in  quick on { $if_guest } proto tcp from $ipv4_bosh to $ipv4_vcenter_esxi # BOSH must communicate with vCenter & ESXi hosts
pass  in  quick on { $if_guest } proto tcp to $ipv4_unifi port 8880 # captive portal for guest network
pass  in  quick on { $if_guest } proto tcp to $ipv4_haproxy port $svcs_cf # Concourse worker can push apps
pass  in  quick on { $if_guest } proto tcp to $ipv4_s3      port 9000 # Concourse worker can access s3
block in  quick on { $if_guest } to { $net_ipv4_nono $net_ipv6_nono $net_ipv4_k8s $net_ipv4_cf $net_ipv6_k8s $net_ipv6_cf }
block in  quick on { $if_k8s $if_cf $if_tas }   to { $net_ipv4_nono $net_ipv6_nono }
pass  in  quick on { $if_guest $if_k8s $if_cf $if_tas }
pass  out quick

pass in quick inet proto icmp all icmp-type $icmp4_types
pass in quick on $if_comcast inet proto tcp to ( $if_comcast ) \
   port $svcs_tcp flags S/SA keep state (max-src-conn 10, max-src-conn-rate 10/60)
pass in quick on $if_comcast inet proto udp to ( $if_comcast ) \
   port $svcs_udp no state

# IPv6
pass in quick on $if_comcast inet6 proto ipv6-icmp icmp6-type \
	$icmp6_types
pass in quick on $if_comcast inet6 proto tcp from $privileged_ipv6 \
	to any port $svcs_privileged_ipv6 flags S/SA
pass in quick on $if_comcast inet6 proto tcp to \
	( $if_comcast ) port $svcs_tcp flags S/SA \
	keep state
pass in quick on $if_comcast inet6 proto udp to \
	( $if_comcast ) port $svcs_udp
pass in quick on $if_comcast inet6 proto tcp to \
	$ipv6_bosh port 25555
# diarizer.com: HTTP(s), both POST (speechbroker) and GET (nginx)
pass in quick on $if_comcast inet6 proto tcp to \
	{ $ipv6_diarizer } port { 22 80 443 8080 9443 } flags S/SA
# s3
pass in quick on $if_comcast inet6 proto tcp to \
	{ $ipv6_s3 } port 9000 flags S/SA
# blindly pass in everything to haproxy because we're terribly trusting
pass in quick inet6 to $ipv6_haproxy

# default deny
block in log
